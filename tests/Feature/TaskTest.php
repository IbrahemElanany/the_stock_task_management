<?php

namespace Tests\Feature;

use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;
use Tests\Traits\TestsTrait;

class TaskTest extends TestCase
{
    use RefreshDatabase;
    use TestsTrait;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->artisan('db:seed');
    }



    public function testListTasks(): void
    {
        $user = $this->getUser();
        $token = $this->getUserToken($user);
        $response = $this->withHeaders([
            'Authorization' => "Bearer $token",
            'Accept'    => 'application/json'
        ])->get('/api/v1/tasks');
        $response
            ->assertStatus(200)
            ->assertJsonIsArray('data')
            ->assertJsonStructure([
                'data'  => [
                    0 =>[
                        'id',
                        'title',
                        'description',
                        'due_date',
                        'status'
                    ]
                ]
            ]);
    }


    public function testCreateTask(): void
    {
        $user = $this->getUser();
        $token = $this->getUserToken($user);
        $response = $this->withHeaders(['Authorization' => "Bearer $token"])
            ->post('/api/v1/tasks', $this->fakeTaskStoreData());
        $response
            ->assertStatus(200)
            ->assertJsonIsObject('data')
            ->assertJsonStructure([
                'msg',
                'data'  => [
                    'id',
                    'title',
                    'description',
                    'due_date',
                    'status'
                ],
            ]);
    }

    public function testCreateTaskValidationError(): void
    {
        $user = $this->getUser();
        $token = $this->getUserToken($user);
        $response = $this->withHeaders(['Authorization' => "Bearer $token"])
            ->post('/api/v1/tasks', $this->wrongFakeTaskStoreData());
        $response
            ->assertStatus(422)
            ->assertJsonStructure([
                'data',
                'msg'
            ]);
    }

    public function testShowTask(): void
    {
        $user = $this->getUser();
        $token = $this->getUserToken($user);
        $task = $this->getOneOfMyTasks($user);
        $response = $this->withHeaders([
            'Authorization' => "Bearer $token",
            'Accept'    => 'application/json'
        ])->get("/api/v1/tasks/$task->id");
        $response
            ->assertStatus(200)
            ->assertJsonIsObject('data')
            ->assertJsonStructure([
                'msg',
                'data'  => [
                    'id',
                    'title',
                    'description',
                    'due_date',
                    'status'
                ],
            ]);
    }

    public function testDeleteTask(): void
    {
        $user = $this->getUser();
        $token = $this->getUserToken($user);
        $task = $this->getOneOfMyTasks($user);
        $response = $this->withHeaders(['Authorization' => "Bearer $token"])
            ->delete("/api/v1/tasks/$task->id");
        $response
            ->assertStatus(200)
            ->assertJsonStructure([
                'data',
                'msg'
            ]);
    }

    public function testDeleteTaskNotMine(): void
    {
        $user = $this->getUser();
        $token = $this->getUserToken($user);
        $taskNotMine = $this->getTaskNotMine($user);
        $response = $this->withHeaders(['Authorization' => "Bearer $token"])
            ->delete("/api/v1/tasks/$taskNotMine->id");
        $response
            ->assertStatus(404)
            ->assertJsonStructure([
                'data',
                'msg'
            ]);
    }

    public function testUnauthenticatedListTasks(): void
    {
        $response = $this->withHeader('Accept', 'application/json')->get('/api/v1/tasks');
        $response
            ->assertStatus(403)
            ->assertJsonStructure([
                'data',
                'msg'
            ]);
    }
}
